package bigbangbomb;

import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Random;
import javax.swing.JLabel;

/**
 *
 * @author Agbonxoft Prince
 */


public class SquarePanel extends JPanel implements MouseListener {
    private boolean flag = false;
    
    SquarePanel() {
        super();
        this.addMouseListener(this);
        setBorder(BorderFactory.createLineBorder(Color.white));
        setBackground(Color.black);
        System.out.println("5\tcreateNextpanel Called and Panel is returned");
        bombSetter();
    }
    
    /**
     * This will help to randomly set bomb on created panels.
     */
    private void bombSetter( ){
        JLabel bomb = new JLabel("");
        
        
        Random bombRandomizer = new Random();
        int bombRandNumber = bombRandomizer.nextInt(2);
        if ( bombRandNumber == 0 ) {
            add( bomb );
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        /**
         * a user will loose game if he clicks once on a panel that holds another
         * component ( :: in our case it's a JLabel used to signify if there is 
         * a bomb or not :: ) while flag is true. 
         * 
         * a user will mark a panel which he thinks there is a bomb if he 
         * double clicks on that panel while the flag is true. if there is 
         * actually a bomb, the panel will be marked else it will stay green
         * which means his guess about that panel was wrong.
         * 
         *       **** Implement how many times a user can guess ****
         * 
         * when a user knows a that a panel has no bomb in it and if he is right
         * the panel will be marked as checked.
         * 
         * 
         *                                  **** 
         *         to know the amount of panels marked as checked or neutralized
         *         create two variables, checked and neutralized. 
         *         -----------
         *         Run a check on variable neutralized
         *         to know if neutralized equals the amount of bombs set 
         *         ( bombs set can be gotten by calculating the amount of 0's 
         *           generated by bombRandomizer )
         *         -----------
         *         Run a check on variable checked
         *         to know if a user has actually marked all the boxes that are
         *         void of bomb ( this check can be actualized by subtracting 
         *         checked amount from the number of grids and see if it is 
         *         equal to the number calculated for bombRandomizer )
         *          
         *         
         *          
         */
        if ( flag ){
           if ( e.getClickCount() == 1 ){
               JPanel src = (JPanel)e.getSource();
               if ( src.getComponentCount() == 1 ){
                   src.setBackground(Color.red);
               }
               else {
                   src.setBackground(Color.green);
               }
           }
           else if ( e.getClickCount() == 2 ){
               JPanel src = (JPanel)e.getSource();
               if (src.getComponentCount() == 1 ){
                   src.setBackground(Color.blue);
               }
           }
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        flag = true; 
        System.out.println(flag);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        flag = false;
        System.out.println(flag);
    }

    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}
}
